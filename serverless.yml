service: serverless-tutorial-project

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  profile: serverlessUser
  region: us-east-1
  environment:
    bucketName: ${self:custom.bucketName}
    imageUploadBucket: ${self:custom.imageUploadBucket}
    region: ${self:provider.region}
  stage: dev
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:*
            - s3:*
            - ses:*
          Resource: "*"

package:
  individually: true

plugins:
  - serverless-webpack

custom:
  bucketName: serverless-tutorial-project-share-3-931988
  imageUploadBucket: serverless-tutorial-project-image-upload-3-931988

functions:
  imageUpload:
    handler: lambdas/endpoints/imageUpload.handler
    events:
      - http:
          path: image-upload
          method: POST
          cors: true

resources:
  Resources:
    ShareBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    ImageBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.imageUploadBucket}
        # AccessControl: PublicRead
    # UploadRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     AssumeRolePolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             Service:
    #               - lambda.amazonaws.com
    #           Action: sts:AssumeRole
    #     Policies:
    #       - PolicyName: upload-policy
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Effect: Allow
    #               Action:
    #                 - s3:PutObject
    #                 - s3:PutObjectAcl
    #               Resource:
    #                 "!Sub"
    #                   - "arn:aws:s3:::${BucketName}/*"
    #                   - { BucketName: !Ref ImageBucketUpload }
    #             - Effect: Allow
    #               Action:
    #                 - logs:CreateLogGroup
    #                 - logs:CreateLogStream
    #                 - logs:PutLogEvents
    #               Resource:
    #                 Fn::Sub:
    #                   - arn:aws:logs:${Region}:${AccountId}:log-group:/aws/lambda/*:*:*
    #                   - {
    #                       Region: !Ref AWS::Region,
    #                       AccountId: !Ref AWS::AccountId,
    #                     }
